-- Copyright (C) 2017  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel MegaCore Function License Agreement, or other 
-- applicable license agreement, including, without limitation, 
-- that your use is for the sole purpose of programming logic 
-- devices manufactured by Intel and sold by Intel or its 
-- authorized distributors.  Please refer to the applicable 
-- agreement for further details.

-- Quartus Prime generated Memory Initialization File (.mif)

DEPTH = 4096;
WIDTH = 32;

ADDRESS_RADIX = DEC;
DATA_RADIX = BIN;

CONTENT
BEGIN
    -- nop
0000 : 00000000000000000000000000000000;
    -- addi $1, $0, 65535      # r1 = 65535 = 0x0000FFFF
0001 : 00101000010000001111111111111111;
    -- sll $2, $1, 15			# r2 = r1 << 15 = 0x7FFF8000 = 2147450880(decimal)
0002 : 00000000100000100000011110010000;
    -- addi $3, $2, 32767		# r3 = r2 + 32767 = 0x7FFF8000 + 0x00007FFF = 0x7FFFFFFF(hex) = 2147483647(decimal)
0003 : 00101000110001000111111111111111;
    -- addi $4, $0, 1			# r4 = 1
0004 : 00101001000000000000000000000001;
    -- addi $6, $3, 10			# r6 = 2147483647 + 10 = 0 (addi overflow)
0005 : 00101001100001100000000000001010;
    -- sll $7, $4, 31			# r7 = r4 << 31 = 0x80000000(hex) = -2147483648(decimal)
0006 : 00000001110010000000111110010000;
    -- addi $1, $0, -100               # r1 = -100
0007 : 00101000010000011111111110011100;
    -- sub $9, $1, $3			# r9 = r1 - r4 = -100 - 2147483647 = 0 (sub overflow)
0008 : 00000010010000100011000000000100;
    -- and $10, $1, $2			# r10 = r1 & r2 = 0x0000FFFF & 0x7FFF8000 = 0x00008000(hex) = 32768(decimal)
0009 : 00000010100000100010000000001000;
    -- or $12, $1, $2			# r12 = r1 | r2 = 0x0000FFFF | 0x7FFF8000 = 0x7FFFFFFF(hex) = 2147483647(decimal)
0010 : 00000011000000100010000000001100;
    -- addi $20, $0, 2         # r20 = 2
0011 : 00101101000000000000000000000010;
    -- add $21, $4, $20        # r21 = 3
0012 : 00000101010010010100000000000000;
    -- add $15, $3, $21       # r15 = r3 + r21 = 2147483647 + 3 = 0 (add overflow)
0013 : 00000011110001110101000000000000;
    -- sub $22, $20, $4        # r22 = 1
0014 : 00000101101010000100000000000100;
    -- and $23, $22, $21       # r23 = 1 & 3 = 1
0015 : 00000101111011010101000000001000;
    -- or $24, $20, $23        # r24 = 2 | 1 = 3
0016 : 00000110001010010111000000001100;
    -- sll $25, $23,1          # r25 = 1 << 1 = 2
0017 : 00000110011011100000000010010000;
    -- sra $26, $25,1          # r26 = 2 >> 1 = 1 
0018 : 00000110101100100000000010010100;
    -- sw $4, 1($0)			# store 1 into address 1
0019 : 00111001000000000000000000000001;
    -- sw $20, 2($0)			# store 2 into address 2
0020 : 00111101000000000000000000000010;
    -- addi $27, $0, 456		# r27 = 456 
0021 : 00101110110000000000000111001000;
    -- sw $1, 0($27)			# store 65535 into address 456
0022 : 00111000011101100000000000000000;
    -- lw $16, 0($27)
0023 : 01000100001101100000000000000000;
    -- lw $28, 1($0)			# load 1 from address 1 into r28
0024 : 01000111000000000000000000000001;
    -- lw $29, 2($0)			# load 2 from address 2 into r29
0025 : 01000111010000000000000000000010;
    -- lw $19, 0($27)			# load 65535 from address 456 into r19
0026 : 01000100111101100000000000000000;
    -- and $18, $4, $20                  # and 1, 2 store it to r18   0
0027 : 00000100100010010100000000001000;
    -- or $17, $4, $20                   # or 1, 2 store it to r17    3
0028 : 00000100010010010100000000001100;
    -- sra $19, $4, 5                    # 1 right shift 5, store it to r19=0 
0029 : 00000100110010000000001010010100;
[0030 .. 4095] : 00000000000000000000000000000000;
END;